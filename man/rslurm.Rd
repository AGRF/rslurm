% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/rslurm.R
\docType{package}
\name{rslurm}
\alias{rslurm}
\alias{rslurm-package}
\title{rslurm: Simple parallel calculations using the SLURM cluster}
\description{
This package automates the process of splitting a R calculation over the
SESYNC SLURM cluster.
}
\section{Overview}{

The core function in the package is \code{\link{slurm_apply}}, with two
essential arguments: a function \code{f} and a data frame of parameters
\code{params} to apply the function to. It automatically splits the set of
parameters into equal-size chunks, each chunk to be processed by a separate
cluster node. It uses functions from the \code{\link[parallel]{parallel}}
package to parallelize computations within each node.

The output of \code{\link{slurm_apply}} is a \code{slurm_job} object that
serves as an input to the other functions in the package:
\code{\link{print_job_status}}, \code{\link{cancel_slurm}},
\code{\link{get_slurm_out}} and \code{\link{cleanup_files}}.

For bug reports or questions about this package, contact
Philippe Marchand (pmarchand@sesync.org).
}

\section{Function Specification}{

To be compatible with \code{\link{slurm_apply}}, a function may accept
any number of single value parameters. The names of these parameters must
match the column names of the \code{params} data frame supplied. It may
return a single value or a vector.

If the function to be parallelized requires knowledge of any R objects (data,
custom helper functions) besides \code{params}, these should be
\code{\link[base]{save}}d into a .RData file that is supplied to
\code{\link{slurm_apply}} as the optional \code{data_file} parameter. Any
calls to functions from external packages should be prefixed with the
appropriate package name i.e. \code{pkg_name::func_name}.

Since any error will interrupt all calculations for the current node, it may
be useful to wrap expressions which may generate errors into a
\code{\link[base]{try}} or \code{\link[base]{tryCatch}} function. This will
ensure the computation continues with the next parameter set after reporting
the error.
}
\examples{
\dontrun{
# Create a data frame of mean/sd values for normal distributions
pars <- data.frame(par_m = seq(-10, 10, length.out = 1000),
                   par_sd = seq(0.1, 10, length.out = 1000))

# Create a function to parallelize
ftest <- function(par_m, par_sd) {
 samp <- rnorm(10^7, par_m, par_sd)
 c(s_m = mean(samp), s_sd = sd(samp))
}

sjob1 <- slurm_apply(ftest, pars)
print_job_status(sjob1)
res <- get_slurm_out(sjob1)
all.equal(pars, res) # Confirm correct output
}
}

